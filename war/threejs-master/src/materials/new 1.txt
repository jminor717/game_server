package website4.servlet;

import java.io.IOException;
import java.time.Instant;
import java.util.ArrayList;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.google.gson.GsonBuilder;
import com.google.gson.Gson;

import website4.controller.chatcontroler;
import website4.model.post;

public class IndexServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	
	@Override
	protected void doGet(HttpServletRequest req, HttpServletResponse resp)
			throws ServletException, IOException {
		
		System.out.println("index Servlet: doGet");
		int chatlength;
		chatcontroler chat =new chatcontroler();
		ArrayList<post> chatposts;
		chatposts= chat.Getchat();
		
		chatlength=chatposts.size();
		
		Gson gson = new GsonBuilder().create();
		String jsonchstpost = gson.toJson(chatposts);
		
		//System.out.println("jsonobj      _"+jsonchstpost);
		
		req.setAttribute("chatposts", jsonchstpost);
		req.setAttribute("chatlength", chatlength);
		req.getRequestDispatcher("/_view/index.jsp").forward(req, resp);
	}
	
	
	
	protected void doPost(HttpServletRequest req, HttpServletResponse resp)
			throws ServletException, IOException {
		
		System.out.println("index Servlet: doPost");
		int chatlength;
		chatcontroler chat =new chatcontroler();
		
		try {
			
			
			String chatinput =  req.getParameter("chatinputtext");
			String username =  req.getParameter("username");
			String password =  req.getParameter("password");
			
			
			
			
			
			System.out.println("username      _ "+username);
			System.out.println("assword      _ "+password);
			System.out.println("chat      _ "+chatinput);
			
			if(username!=null&&password!=null) {
				if(username.trim().length()>0&&password.trim().length()>0) {
				
					
					
				}
			}
			if(chatinput!=null) {
				if(chatinput.trim().length()>0) {
					long now=Instant.now().toEpochMilli();
					//if()
					chat.makenewpost(now, "jmino", chatinput);
					System.out.println("chatpassed      _ "+chatinput);
					
					
					
					
					
				}
			}
			
			

		}
		finally{
			
		}
		
		
		
		
		ArrayList<post> chatposts;
		chatposts= chat.Getchat();
		
		chatlength=chatposts.size();
		
		Gson gson = new GsonBuilder().create();
		String jsonchstpost = gson.toJson(chatposts);
		
		//System.out.println("jsonobj      _"+jsonchstpost);
		
		req.setAttribute("chatposts", jsonchstpost);
		req.setAttribute("chatlength", chatlength);
		req.getRequestDispatcher("/_view/index.jsp").forward(req, resp);
	}
}






























Hawking,Stephen,The Universe in a Nutshell,0-553-80202-3,2001







[{"userid":0,"milstime":15210791386,"username":"jminor","post":"this cant be right"},{"userid":0,"milstime":1511079138360,"username":"jminor","post":"iim from teh past"},{"userid":0,"milstime":1521079138360,"username":"jminor","post":"this is a post with some text"},{"userid":0,"milstime":1521079138360,"username":"jminor","post":"so is this"},{"userid":0,"milstime":1521389842015,"username":"guest_74578","post":"uy giuybiubi"}]

















	@Test
	public void testGuestUser() {
		
		for(int i = 0; i < 1000; i++) {
			userGuest = new User();
			userGuest2 = new User();
			assertTrue(userGuest.getusername() != userGuest2.getusername());
		}
	
		assertTrue(userGuest.getcoins() == 0);
		assertTrue(userGuest.isguest() == true);
		assertTrue(userGuest2.getcoins() == 0);
		assertTrue(userGuest2.isguest() == true);
		assertTrue(userGuest.getusername() != userGuest2.getusername());
	}
	
	@Test
	public void testGettersSetters(){
		bList.add(userGuest);
		user1.setcoins(100);
		user1.setemail("theDude@gmail.gov");
		user1.setpassword("doggy");
		user1.setusername("itsYaBoi69");
		user1.addtoblacklist(userGuest);
		assertTrue(user1.getblacklist().get(0) == bList.get(0));
		assertTrue(user1.getcoins() == 100);
		assertTrue(user1.getemail() == "theDude@gmail.gov");
		assertTrue(user1.getpassword() == "doggy");
		assertTrue(user1.getusername() == "itsYaBoi69");
	}



	
	
	
	
	
	
	
	
	
	
	
	
-<?xml version="1.0" encoding="UTF-8"?>
-<classpath>
-	<classpathentry kind="src" path="src"/>
-	<classpathentry kind="src" output="test-bin" path="junit"/>
-	<classpathentry kind="src" output="bin" path="main"/>
-	<classpathentry kind="con" path="org.eclipse.jdt.junit.JUNIT_CONTAINER/4"/>
-	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"/>
-	<classpathentry combineaccessrules="false" kind="src" path="/CS320_Jetty9"/>
-	<classpathentry kind="lib" path="C:/Users/jason/git/website4/externaljres/gson-2.6.2.jar"/>
-	<classpathentry kind="lib" path="C:/Users/jason/git/website4/externaljres/gson-2.6.2-javadoc.jar"/>
-	<classpathentry kind="lib" path="C:/Users/jason/git/website4/externaljres/gson-2.6.2-sources.jar"/>
-	<classpathentry kind="output" path="war/WEB-INF/classes"/>
-</classpath>















/*
	Three.js "tutorials by example"
	Author: Lee Stemkoski
	Date: July 2013 (three.js v59dev)
*/

// MAIN

// standard global variables
var container, scene, camera, renderer, controls, stats;
var keyboard = new THREEx.KeyboardState();
var clock = new THREE.Clock();
// custom global variables

var MovingCube;
var collidableMeshList = [];

var arrowList = [];
var directionList = [];

init();
animate();

// FUNCTIONS 		
function init() 
{
	// SCENE
	scene = new THREE.Scene();
	// CAMERA
	var SCREEN_WIDTH = window.innerWidth, SCREEN_HEIGHT = window.innerHeight;
	var VIEW_ANGLE = 45, ASPECT = SCREEN_WIDTH / SCREEN_HEIGHT, NEAR = 0.1, FAR = 20000;
	camera = new THREE.PerspectiveCamera( VIEW_ANGLE, ASPECT, NEAR, FAR);
	scene.add(camera);
	camera.position.set(0,150,400);
	camera.lookAt(scene.position);	
	// RENDERER
	if ( Detector.webgl )
		renderer = new THREE.WebGLRenderer( {antialias:true} );
	else
		renderer = new THREE.CanvasRenderer(); 
	renderer.setSize(SCREEN_WIDTH, SCREEN_HEIGHT);
	container = document.getElementById( 'ThreeJS' );
	container.appendChild( renderer.domElement );
	// EVENTS
	THREEx.WindowResize(renderer, camera);
	THREEx.FullScreen.bindKey({ charCode : 'm'.charCodeAt(0) });
	// CONTROLS
	controls = new THREE.OrbitControls( camera, renderer.domElement );
	// STATS
	stats = new Stats();
	stats.domElement.style.position = 'absolute';
	stats.domElement.style.bottom = '0px';
	stats.domElement.style.zIndex = 100;
	container.appendChild( stats.domElement );
	// LIGHT
	var light = new THREE.PointLight(0xffffff);
	light.position.set(0,250,0);
	scene.add(light);
	// FLOOR
	var floorMaterial = new THREE.MeshBasicMaterial( {color:0x444444, side:THREE.DoubleSide} );
	var floorGeometry = new THREE.PlaneGeometry(1000, 1000, 10, 10);
	var floor = new THREE.Mesh(floorGeometry, floorMaterial);
	floor.position.y = -0.5;
	floor.rotation.x = Math.PI / 2;
	scene.add(floor);
	// SKYBOX/FOG
	var skyBoxGeometry = new THREE.CubeGeometry( 10000, 10000, 10000 );
	var skyBoxMaterial = new THREE.MeshBasicMaterial( { color: 0x9999ff, side: THREE.BackSide } );
	var skyBox = new THREE.Mesh( skyBoxGeometry, skyBoxMaterial );
	scene.add(skyBox);
	
	////////////
	// CUSTOM //
	////////////

	var cubeGeometry = new THREE.CubeGeometry(50,50,50,1,1,1);
	var wireMaterial = new THREE.MeshBasicMaterial( { color: 0xff0000, wireframe:true } );
	MovingCube = new THREE.Mesh( cubeGeometry, wireMaterial );
	MovingCube.position.set(0, 25.1, 0);
	scene.add( MovingCube );	
	
	var wallGeometry = new THREE.CubeGeometry( 100, 100, 20, 1, 1, 1 );
	var wallMaterial = new THREE.MeshBasicMaterial( {color: 0x8888ff} );
	var wireMaterial = new THREE.MeshBasicMaterial( { color: 0x000000, wireframe:true } );
	
	var wall = new THREE.Mesh(wallGeometry, wallMaterial);
	wall.position.set(100, 50, -100);
	scene.add(wall);
	collidableMeshList.push(wall);
	var wall = new THREE.Mesh(wallGeometry, wireMaterial);
	wall.position.set(100, 50, -100);
	scene.add(wall);
	
	var wall2 = new THREE.Mesh(wallGeometry, wallMaterial);
	wall2.position.set(-150, 50, 0);
	wall2.rotation.y = 3.14159 / 2;
	scene.add(wall2);
	collidableMeshList.push(wall2);
	var wall2 = new THREE.Mesh(wallGeometry, wireMaterial);
	wall2.position.set(-150, 50, 0);
	wall2.rotation.y = 3.14159 / 2;
	scene.add(wall2);
	
	
}

function clearText()
{   document.getElementById('message').innerHTML = '..........';   }

function appendText(txt)
{   document.getElementById('message').innerHTML += txt;   }

function animate() 
{
    requestAnimationFrame( animate );
	render();		
	update();
}

function update()
{
	var delta = clock.getDelta(); // seconds.
	var moveDistance = 200 * delta; // 200 pixels per second
	var rotateAngle = Math.PI / 2 * delta;   // pi/2 radians (90 degrees) per second
	
	if ( keyboard.pressed("A") )
		MovingCube.rotation.y += rotateAngle;
	if ( keyboard.pressed("D") )
		MovingCube.rotation.y -= rotateAngle;
			
	if ( keyboard.pressed("left") )
		MovingCube.position.x -= moveDistance;
	if ( keyboard.pressed("right") )
		MovingCube.position.x += moveDistance;
	if ( keyboard.pressed("up") )
		MovingCube.position.z -= moveDistance;
	if ( keyboard.pressed("down") )
		MovingCube.position.z += moveDistance;
				
	// collision detection:
	//   determines if any of the rays from the cube's origin to each vertex
	//		intersects any face of a mesh in the array of target meshes
	//   for increased collision accuracy, add more vertices to the cube;
	//		for example, new THREE.CubeGeometry( 64, 64, 64, 8, 8, 8, wireMaterial )
	//   HOWEVER: when the origin of the ray is within the target mesh, collisions do not occur
	var originPoint = MovingCube.position.clone();

	clearText();
	
	for (var vertexIndex = 0; vertexIndex < MovingCube.geometry.vertices.length; vertexIndex++)
	{		
		var localVertex = MovingCube.geometry.vertices[vertexIndex].clone();
		var globalVertex = localVertex.applyMatrix4( MovingCube.matrix );
		var directionVector = globalVertex.sub( MovingCube.position );
		
		var ray = new THREE.Raycaster( originPoint, directionVector.clone().normalize() );
		var collisionResults = ray.intersectObjects( collidableMeshList );
		if ( collisionResults.length > 0 && collisionResults[0].distance < directionVector.length() ) 
			appendText(" Hit ");
	}	

	controls.update();
	stats.update();
}

function render() 
{
	renderer.render( scene, camera );
}





























